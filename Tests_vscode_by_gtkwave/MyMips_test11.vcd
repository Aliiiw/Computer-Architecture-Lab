$date
	Sun Jan 22 01:38:36 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module MyMipsTest $end
$var reg 1 ! clock $end
$var integer 32 " range [31:0] $end
$scope module uut $end
$var wire 6 # OpcodeInputCU [5:0] $end
$var wire 1 ! clock $end
$var wire 32 $ instructionInputDecode [31:0] $end
$var wire 32 % instructionInputIFID [31:0] $end
$var wire 32 & nextPcInputIFID [31:0] $end
$var wire 1 ' zeroFlagEXMEM $end
$var wire 1 ( zeroExecute $end
$var wire 5 ) writeRegMEMWB [4:0] $end
$var wire 5 * writeRegEXMEM [4:0] $end
$var wire 32 + writeDataWB [31:0] $end
$var wire 32 , signExtendedOutputDecode [31:0] $end
$var wire 5 - rtIDEX [4:0] $end
$var wire 5 . rtDecode [4:0] $end
$var wire 1 / registerDestinationIDEX $end
$var wire 1 0 regWriteMEMWB $end
$var wire 1 1 regWriteIDEX $end
$var wire 1 2 regWriteEXMEM $end
$var wire 1 3 regWriteCU $end
$var wire 1 4 regDestinationCU $end
$var wire 32 5 readDataTwoOutputDecode [31:0] $end
$var wire 32 6 readDataTwoIDEX [31:0] $end
$var wire 32 7 readDataTwoEXMEM [31:0] $end
$var wire 32 8 readDataOneOutputDecode [31:0] $end
$var wire 32 9 readDataOneIDEX [31:0] $end
$var wire 32 : readDataMEMWB [31:0] $end
$var wire 32 ; readDataForDataMemory [31:0] $end
$var wire 5 < rdIDEX [4:0] $end
$var wire 5 = rdDecode [4:0] $end
$var wire 1 > pcSourceDataMemory $end
$var wire 6 ? opcodeOutputDecode [5:0] $end
$var wire 32 @ nextPcOutputIFID [31:0] $end
$var wire 32 A nextPCIDEX [31:0] $end
$var wire 32 B nextPCFetch [31:0] $end
$var wire 5 C muxOutputExecute [4:0] $end
$var wire 1 D memWriteIDEX $end
$var wire 1 E memWriteEXMEM $end
$var wire 1 F memWriteCU $end
$var wire 1 G memToRegMEMWB $end
$var wire 1 H memToRegIDEX $end
$var wire 1 I memToRegEXMEM $end
$var wire 1 J memToRegCU $end
$var wire 1 K memReadIDEX $end
$var wire 1 L memReadEXMEM $end
$var wire 1 M memReadCU $end
$var wire 32 N instructionOutputIFID [31:0] $end
$var wire 32 O instructionFetch [31:0] $end
$var wire 32 P immediateIDEX [31:0] $end
$var wire 1 Q hitForAll $end
$var wire 32 R branchTargetExecute [31:0] $end
$var wire 32 S branchTargetEXMEM [31:0] $end
$var wire 1 T branchIDEX $end
$var wire 1 U branchEXMEM $end
$var wire 1 V branchCU $end
$var wire 6 W FunctionIDEX [5:0] $end
$var wire 1 X ALUSourceIDEX $end
$var wire 1 Y ALUSourceCU $end
$var wire 32 Z ALUResultMEMWB [31:0] $end
$var wire 32 [ ALUResultExecute [31:0] $end
$var wire 32 \ ALUResultEXMEM [31:0] $end
$var wire 3 ] ALUOperationIDEX [2:0] $end
$var wire 3 ^ ALUOpcodeCU [2:0] $end
$var reg 1 _ branchIDEXEXMEMWait $end
$var reg 1 ` memReadIDEXEXMEMWait $end
$var reg 1 a memToRegIDEXEXMEMWait $end
$var reg 1 b memWriteIDEXEXMEMWait $end
$var reg 32 c readDataTwoExecuteEXMEMWait [31:0] $end
$var reg 1 d regWriteIDEXEXMEMWait $end
$scope module myMipsControlUnit $end
$var wire 6 e opCode [5:0] $end
$var reg 3 f aluOpcode [2:0] $end
$var reg 1 Y aluSource $end
$var reg 1 V branch $end
$var reg 1 M memRead $end
$var reg 1 J memToReg $end
$var reg 1 F memWrite $end
$var reg 1 4 regDestination $end
$var reg 1 3 regWrite $end
$upscope $end
$scope module myMipsDataMemory $end
$var wire 1 ! clock $end
$var wire 32 g writeData [31:0] $end
$var wire 1 E memWrite $end
$var wire 1 L memRead $end
$var wire 32 h address [31:0] $end
$var reg 32 i readData [31:0] $end
$upscope $end
$scope module myMipsDecode $end
$var wire 1 ! clock $end
$var wire 32 j instruction [31:0] $end
$var wire 5 k writeReg [4:0] $end
$var wire 32 l writeData [31:0] $end
$var wire 1 0 regWrite $end
$var wire 32 m _signExtendValue [31:0] $end
$var wire 32 n _readDataTwo [31:0] $end
$var wire 32 o _readDataOne [31:0] $end
$var reg 16 p IMMValue [15:0] $end
$var reg 5 q RD [4:0] $end
$var reg 5 r RS [4:0] $end
$var reg 5 s RT [4:0] $end
$var reg 6 t opCode [5:0] $end
$var reg 5 u rd [4:0] $end
$var reg 32 v readDataNumberOne [31:0] $end
$var reg 32 w readDataNumberTwo [31:0] $end
$var reg 5 x rt [4:0] $end
$var reg 32 y signExtendedImmediate [31:0] $end
$scope module registerFile $end
$var wire 1 ! clock $end
$var wire 32 z readDataNumberOne [31:0] $end
$var wire 32 { readDataNumberTwo [31:0] $end
$var wire 5 | readRegisterNumberOne [4:0] $end
$var wire 5 } readRegisterNumberTwo [4:0] $end
$var wire 5 ~ writeReg [4:0] $end
$var wire 32 !" writeData [31:0] $end
$var wire 1 0 regWrite $end
$var integer 32 "" i [31:0] $end
$upscope $end
$scope module signExtended $end
$var wire 16 #" originValue [15:0] $end
$var wire 32 $" signExtendedValue [31:0] $end
$upscope $end
$upscope $end
$scope module myMipsEXMemoryRegister $end
$var wire 1 _ branch $end
$var wire 32 %" branchTarget [31:0] $end
$var wire 1 ! clock $end
$var wire 1 &" hitOut $end
$var wire 1 ` memRead $end
$var wire 1 a memToReg $end
$var wire 1 b memWrite $end
$var wire 32 '" readDataTwo [31:0] $end
$var wire 1 d regWrite $end
$var wire 5 (" writeReg [4:0] $end
$var wire 1 ( zeroFlag $end
$var wire 1 Q hit $end
$var wire 32 )" ALUResult [31:0] $end
$var reg 32 *" ALUResultOut [31:0] $end
$var reg 1 U branchOut $end
$var reg 32 +" branchTargetOut [31:0] $end
$var reg 1 L memReadOut $end
$var reg 1 I memToRegOut $end
$var reg 1 E memWriteOut $end
$var reg 32 ," readDataTwoOut [31:0] $end
$var reg 1 2 regWriteOut $end
$var reg 5 -" writeRegOut [4:0] $end
$var reg 1 ' zeroFlagOut $end
$upscope $end
$scope module myMipsExecute $end
$var wire 5 ." ShiftAmount [4:0] $end
$var wire 1 ! clock $end
$var wire 1 ( zero $end
$var wire 32 /" immediate [31:0] $end
$var wire 6 0" Function [5:0] $end
$var wire 1 X ALUSource $end
$var wire 32 1" ALUResult [31:0] $end
$var wire 32 2" ALUReadDataTwo [31:0] $end
$var wire 32 3" ALUReadDataOne [31:0] $end
$var wire 3 4" ALUOperation [2:0] $end
$var wire 32 5" ALUInputDataTwo [31:0] $end
$var wire 4 6" ALUControl [3:0] $end
$scope module ALUCU $end
$var wire 6 7" Function [5:0] $end
$var wire 3 8" ALUOperation [2:0] $end
$var reg 4 9" ALUControl [3:0] $end
$upscope $end
$scope module ALUInstance $end
$var wire 4 :" ALUControl [3:0] $end
$var wire 5 ;" shiftAmount [4:0] $end
$var wire 32 <" inputTwo [31:0] $end
$var wire 32 =" inputOne [31:0] $end
$var reg 32 >" result [31:0] $end
$var reg 1 ( zero $end
$upscope $end
$scope module mux $end
$var wire 1 X select $end
$var wire 32 ?" muxResult [31:0] $end
$var wire 32 @" inputTwo [31:0] $end
$var wire 32 A" inputOne [31:0] $end
$upscope $end
$upscope $end
$scope module myMipsFetch $end
$var wire 32 B" branchTarget [31:0] $end
$var wire 1 ! clock $end
$var wire 1 > pcSource $end
$var wire 32 C" nextPc [31:0] $end
$var wire 32 D" nextAddress [31:0] $end
$var wire 32 E" instruction [31:0] $end
$var wire 1 Q hit $end
$var wire 128 F" data [127:0] $end
$var wire 32 G" address [31:0] $end
$scope module cache $end
$var wire 1 ! clock $end
$var wire 128 H" dataLine [127:0] $end
$var wire 32 I" address [31:0] $end
$var reg 1 Q hit $end
$var reg 32 J" instruction [31:0] $end
$upscope $end
$scope module instructionMemory $end
$var wire 1 ! clock $end
$var wire 32 K" instructionAddress [31:0] $end
$var reg 28 L" addressValue [27:0] $end
$var reg 3 M" counter [2:0] $end
$var reg 32 N" index [31:0] $end
$var reg 128 O" outputInstructionMemory [127:0] $end
$upscope $end
$scope module mux $end
$var wire 32 P" branchTarget [31:0] $end
$var wire 32 Q" pc [31:0] $end
$var wire 1 > pcSource $end
$var reg 32 R" address [31:0] $end
$upscope $end
$scope module pc $end
$var wire 1 ! clock $end
$var wire 1 Q hit $end
$var wire 32 S" nextAddress [31:0] $end
$var reg 32 T" address [31:0] $end
$upscope $end
$upscope $end
$scope module myMipsIDEX $end
$var wire 3 U" ALUOperation [2:0] $end
$var wire 1 Y ALUSource $end
$var wire 6 V" Function [5:0] $end
$var wire 5 W" RD [4:0] $end
$var wire 5 X" RT [4:0] $end
$var wire 1 V branch $end
$var wire 1 ! clock $end
$var wire 1 Q hit $end
$var wire 1 Y" hitOut $end
$var wire 32 Z" immediate [31:0] $end
$var wire 1 M memRead $end
$var wire 1 J memToReg $end
$var wire 1 F memWrite $end
$var wire 32 [" readDataOne [31:0] $end
$var wire 32 \" readDataTwo [31:0] $end
$var wire 1 3 regWrite $end
$var wire 1 4 registerDestination $end
$var wire 32 ]" nextPC [31:0] $end
$var reg 3 ^" ALUOperationOut [2:0] $end
$var reg 1 X ALUSourceOut $end
$var reg 6 _" FunctionOut [5:0] $end
$var reg 5 `" RDOut [4:0] $end
$var reg 5 a" RTOut [4:0] $end
$var reg 1 T branchOut $end
$var reg 32 b" immediateOut [31:0] $end
$var reg 1 K memReadOut $end
$var reg 1 H memToRegOut $end
$var reg 1 D memWriteOut $end
$var reg 32 c" nextPCOut [31:0] $end
$var reg 32 d" readDataOneOut [31:0] $end
$var reg 32 e" readDataTwoOut [31:0] $end
$var reg 1 1 regWriteOut $end
$var reg 1 / registerDestinationOut $end
$upscope $end
$scope module myMipsIFID $end
$var wire 1 ! clock $end
$var wire 1 Q hitInput $end
$var wire 1 f" hitOutput $end
$var wire 32 g" instructionInput [31:0] $end
$var wire 32 h" nextPcInput [31:0] $end
$var reg 32 i" instructionOutput [31:0] $end
$var reg 32 j" nextPcOutput [31:0] $end
$upscope $end
$scope module myMipsMemoryWriteBackRegister $end
$var wire 32 k" ALUResult [31:0] $end
$var wire 1 ! clock $end
$var wire 1 Q hit $end
$var wire 1 l" hitOut $end
$var wire 1 I memToReg $end
$var wire 32 m" readData [31:0] $end
$var wire 1 2 regWrite $end
$var wire 5 n" writeReg [4:0] $end
$var reg 32 o" ALUResultOut [31:0] $end
$var reg 1 G memToRegOut $end
$var reg 32 p" readDataOut [31:0] $end
$var reg 1 0 regWriteOut $end
$var reg 5 q" writeRegOut [4:0] $end
$upscope $end
$scope module myMipsWriteBack $end
$var wire 32 r" ALUResult [31:0] $end
$var wire 1 G memToReg $end
$var wire 32 s" readData [31:0] $end
$var reg 32 t" writeData [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 t"
b0 s"
b0 r"
b0 q"
b0 p"
b0 o"
b0 n"
b0 m"
0l"
b0 k"
b0 j"
b0 i"
b100 h"
bx g"
0f"
b0 e"
b0 d"
bx c"
b0 b"
bx a"
bx `"
bx _"
bx ^"
b0 ]"
b0 \"
b0 ["
b0 Z"
0Y"
b0 X"
b0 W"
b0 V"
b0 U"
b0 T"
b100 S"
b100 R"
b100 Q"
b0 P"
bx O"
bx N"
b0 M"
bx L"
b0 K"
bx J"
b0 I"
bx H"
b0 G"
bx F"
bx E"
b100 D"
b100 C"
b0 B"
b0 A"
b0 @"
b0 ?"
bx >"
b0 ="
b0 <"
b1 ;"
bx :"
bx 9"
bx 8"
bx 7"
bx 6"
b0 5"
bx 4"
b0 3"
b0 2"
bx 1"
bx 0"
b0 /"
b1 ."
b0 -"
b0 ,"
b0 +"
b0 *"
bx )"
bx ("
bx '"
0&"
bx %"
bx $"
bx #"
b100000 ""
b0 !"
b0 ~
bx }
bx |
bx {
bx z
b0 y
b0 x
b0 w
b0 v
b0 u
b0 t
bx s
bx r
bx q
bx p
bx o
bx n
bx m
b0 l
b0 k
b0 j
b0 i
b0 h
b0 g
b0 f
b0 e
xd
bx c
xb
xa
x`
x_
b0 ^
bx ]
b0 \
bx [
b0 Z
0Y
xX
bx W
0V
0U
xT
b0 S
bx R
0Q
b0 P
bx O
b0 N
0M
0L
xK
0J
0I
xH
0G
0F
0E
xD
bx C
b100 B
bx A
b0 @
b0 ?
0>
b0 =
bx <
b0 ;
b0 :
b0 9
b0 8
b0 7
b0 6
b0 5
14
13
02
x1
00
x/
b0 .
bx -
b0 ,
b0 +
b0 *
b0 )
x(
0'
b100 &
bx %
b0 $
b0 #
b0 "
0!
$end
#50000
bx V"
b0 L"
b1 M"
b0 m
b0 $"
b0 p
b0 #"
b0 q
b0 n
b0 {
b0 s
b0 }
b0 o
b0 z
b0 r
b0 |
bx =
bx u
bx W"
bx .
bx x
bx X"
bx ,
bx y
bx Z"
bx 5
bx w
bx \"
bx 8
bx v
bx ["
b0 c
b0 '"
b1 "
1!
#100000
0!
#150000
b0 V"
b10 "
b0 =
b0 u
b0 W"
b0 .
b0 x
b0 X"
b0 ,
b0 y
b0 Z"
b0 5
b0 w
b0 \"
b0 8
b0 v
b0 ["
b10 M"
1!
#200000
0!
#250000
b11 M"
b11 "
1!
#300000
0!
#350000
b100 "
b100 M"
1!
#400000
0!
#450000
b0 M"
b11011000001101000011000110000000110110000011010000110001100000001101100000110100001100011000000011011000001101000011000110 F"
b11011000001101000011000110000000110110000011010000110001100000001101100000110100001100011000000011011000001101000011000110 H"
b11011000001101000011000110000000110110000011010000110001100000001101100000110100001100011000000011011000001101000011000110 O"
b0 N"
b101 "
1!
#500000
0!
#550000
b110 "
b11011000001101000011000110 %
b11011000001101000011000110 g"
b11011000001101000011000110 O
b11011000001101000011000110 E"
b11011000001101000011000110 J"
1Y"
1f"
1l"
1&"
1Q
b1 M"
1!
#600000
xI
x2
xU
xE
xL
bx *
bx -"
bx n"
bx \
bx h
bx *"
bx k"
x'
bx S
bx +"
bx B"
bx P"
1(
b0 [
b0 )"
b0 1"
b0 >"
b1000 D"
b1000 R"
b1000 S"
b0 6"
b0 9"
b0 :"
b0 C
b0 ("
b1000 &
b1000 h"
b1000 B
b1000 C"
b1000 Q"
b100 G"
b100 I"
b100 K"
b100 T"
b100 @
b100 ]"
b100 j"
b11011000001101000011000110 $
b11011000001101000011000110 j
b11011000001101000011000110 N
b11011000001101000011000110 i"
b0 R
b0 %"
b0 A
b0 c"
b0 W
b0 0"
b0 7"
b0 _"
b0 <
b0 `"
b0 -
b0 a"
b0 ]
b0 4"
b0 8"
b0 ^"
0T
0D
0K
11
0H
0X
1/
0!
#650000
b10 M"
b11111111111111111101000011000110 m
b11111111111111111101000011000110 $"
b1101000011000110 p
b1101000011000110 #"
b11010 q
b11011 o
b11011 z
b11011 r
b11011 |
0a
1d
0_
0b
0`
b111 "
1!
#700000
0I
12
0U
0E
0L
b0 *
b0 -"
b0 n"
b0 \
b0 h
b0 *"
b0 k"
1'
b1100 S
b1100 +"
b1100 B"
b1100 P"
bx +
bx l
bx !"
bx t"
b1100 D"
b1100 R"
b1100 S"
xG
x0
bx )
bx k
bx ~
bx q"
bx Z
bx o"
bx r"
b1100 R
b1100 %"
b1100 A
b1100 c"
b1100 @
b1100 ]"
b1100 j"
b1100 &
b1100 h"
b1100 B
b1100 C"
b1100 Q"
b1000 G"
b1000 I"
b1000 K"
b1000 T"
0!
#750000
b110 V"
b1000 "
b11010 =
b11010 u
b11010 W"
b11111111111111111101000011000110 ,
b11111111111111111101000011000110 y
b11111111111111111101000011000110 Z"
b11011 8
b11011 v
b11011 ["
b11 M"
1!
#800000
b10000 D"
b10000 R"
b10000 S"
b100 6"
b100 9"
b100 :"
b11010 C
b11010 ("
b11111111111111110100001100100100 R
b11111111111111110100001100100100 %"
0(
b1101 [
b1101 )"
b1101 1"
b1101 >"
b0 +
b0 l
b0 !"
b0 t"
b10000 &
b10000 h"
b10000 B
b10000 C"
b10000 Q"
b1100 G"
b1100 I"
b1100 K"
b1100 T"
b110 W
b110 0"
b110 7"
b110 _"
b11010 <
b11010 `"
b11111111111111111101000011000110 P
b11111111111111111101000011000110 /"
b11111111111111111101000011000110 @"
b11111111111111111101000011000110 b"
b11011 9
b11011 3"
b11011 ="
b11011 d"
0G
10
b0 )
b0 k
b0 ~
b0 q"
b0 Z
b0 o"
b0 r"
0!
#850000
b100 M"
b1001 "
1!
#900000
b11010 *
b11010 -"
b11010 n"
b1101 \
b1101 h
b1101 *"
b1101 k"
0'
b11111111111111110100001100101100 S
b11111111111111110100001100101100 +"
b11111111111111110100001100101100 B"
b11111111111111110100001100101100 P"
b10100 D"
b10100 R"
b10100 S"
b11111111111111110100001100101100 R
b11111111111111110100001100101100 %"
b10100 A
b10100 c"
b10100 @
b10100 ]"
b10100 j"
b10100 &
b10100 h"
b10100 B
b10100 C"
b10100 Q"
b10000 G"
b10000 I"
b10000 K"
b10000 T"
0!
#950000
b1010 "
0Y"
0f"
0l"
0&"
0Q
b1 M"
b1 L"
1!
#1000000
0!
#1050000
b10 M"
b1011 "
1!
#1100000
0!
#1150000
b1100 "
b11 M"
1!
#1200000
0!
#1250000
b100 M"
b1101 "
1!
#1300000
0!
#1350000
b1110 "
b0 M"
b11011000001101000011000110xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx F"
b11011000001101000011000110xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx H"
b11011000001101000011000110xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx O"
b10000 N"
1!
#1400000
0!
#1450000
b1 M"
bx %
bx g"
bx O
bx E"
bx J"
1Y"
1f"
1l"
1&"
1Q
b1111 "
1!
#1500000
b11111111111111110100001100110000 S
b11111111111111110100001100110000 +"
b11111111111111110100001100110000 B"
b11111111111111110100001100110000 P"
b1101 +
b1101 l
b1101 !"
b1101 t"
b11000 D"
b11000 R"
b11000 S"
b11010 )
b11010 k
b11010 ~
b11010 q"
b1101 Z
b1101 o"
b1101 r"
b11111111111111110100001100110000 R
b11111111111111110100001100110000 %"
b11000 A
b11000 c"
b11000 @
b11000 ]"
b11000 j"
bx $
bx j
bx N
bx i"
b11000 &
b11000 h"
b11000 B
b11000 C"
b11000 Q"
b10100 G"
b10100 I"
b10100 K"
b10100 T"
0!
#1550000
bx V"
03
04
b10000 "
bx =
bx u
bx W"
bx .
bx x
bx X"
b1111111111111111xxxxxxxxxxxxxxxx ,
b1111111111111111xxxxxxxxxxxxxxxx y
b1111111111111111xxxxxxxxxxxxxxxx Z"
bx 5
bx w
bx \"
bx 8
bx v
bx ["
bx #
bx e
bx ?
bx t
bx m
bx $"
bx p
bx #"
bx q
bx n
bx {
bx s
bx }
bx o
bx z
bx r
bx |
b10 M"
1!
#1600000
b11100 D"
b11100 R"
b11100 S"
bx C
bx ("
bx R
bx %"
bx 5"
bx <"
bx ?"
x(
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx [
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx )"
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 1"
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx >"
b11100 &
b11100 h"
b11100 B
b11100 C"
b11100 Q"
b11000 G"
b11000 I"
b11000 K"
b11000 T"
bx W
bx 0"
bx 7"
bx _"
bx <
bx `"
bx -
bx a"
01
0/
b1111111111111111xxxxxxxxxxxxxxxx P
b1111111111111111xxxxxxxxxxxxxxxx /"
b1111111111111111xxxxxxxxxxxxxxxx @"
b1111111111111111xxxxxxxxxxxxxxxx b"
bx 6
bx 2"
bx A"
bx e"
bx 9
bx 3"
bx ="
bx d"
0!
#1650000
b11 M"
bx ,
bx y
bx Z"
0d
b10001 "
1!
#1700000
02
bx *
bx -"
bx n"
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx \
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx h
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx *"
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx k"
x'
bx S
bx +"
bx B"
bx P"
b100000 D"
b100000 R"
b100000 S"
b100000 A
b100000 c"
bx P
bx /"
bx @"
bx b"
b100000 @
b100000 ]"
b100000 j"
b100000 &
b100000 h"
b100000 B
b100000 C"
b100000 Q"
b11100 G"
b11100 I"
b11100 K"
b11100 T"
0!
#1750000
b10010 "
b11011000001101000011000110 %
b11011000001101000011000110 g"
b11011000001101000011000110 O
b11011000001101000011000110 E"
b11011000001101000011000110 J"
b100 M"
1!
#1800000
b100100 D"
b100100 R"
b100100 S"
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx +
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx l
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx !"
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx t"
b100100 &
b100100 h"
b100100 B
b100100 C"
b100100 Q"
b100000 G"
b100000 I"
b100000 K"
b100000 T"
b11011000001101000011000110 $
b11011000001101000011000110 j
b11011000001101000011000110 N
b11011000001101000011000110 i"
00
bx )
bx k
bx ~
bx q"
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx Z
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx o"
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx r"
0!
#1850000
13
14
b1 M"
b10 L"
0Y"
0f"
0l"
0&"
0Q
b11111111111111111101000011000110 m
b11111111111111111101000011000110 $"
b1101000011000110 p
b1101000011000110 #"
b11010 q
b0 n
b0 {
b0 s
b0 }
b11011 o
b11011 z
b11011 r
b11011 |
b0 #
b0 e
b0 ?
b0 t
b10011 "
1!
#1900000
0!
#1950000
b110 V"
b10100 "
b11010 =
b11010 u
b11010 W"
b0 .
b0 x
b0 X"
b11111111111111111101000011000110 ,
b11111111111111111101000011000110 y
b11111111111111111101000011000110 Z"
b0 5
b0 w
b0 \"
b11011 8
b11011 v
b11011 ["
b10 M"
1!
#2000000
0!
#2050000
b11 M"
b10101 "
1!
#2100000
0!
#2150000
b10110 "
b100 M"
1!
#2200000
0!
#2250000
b0 M"
bx F"
bx H"
bx O"
b100000 N"
b10111 "
1!
#2300000
0!
#2350000
b11000 "
b1 M"
1!
#2400000
0!
#2450000
b10 M"
b11001 "
1!
#2500000
0!
#2550000
b11010 "
b11 M"
1!
#2600000
0!
#2650000
b100 M"
b11011 "
1!
#2700000
0!
#2750000
b11100 "
b0 M"
1!
#2800000
0!
#2850000
b1 M"
b11101 "
1!
#2900000
0!
#2950000
b11110 "
b10 M"
1!
#3000000
0!
#3050000
b11 M"
b11111 "
1!
#3100000
0!
#3150000
b100000 "
b100 M"
1!
#3200000
0!
#3250000
b0 M"
b100001 "
1!
#3300000
0!
#3350000
b100010 "
b1 M"
1!
#3400000
0!
#3450000
b10 M"
b100011 "
1!
#3500000
0!
#3550000
b100100 "
b11 M"
1!
#3600000
0!
#3650000
b100 M"
b100101 "
1!
#3700000
0!
#3750000
b100110 "
b0 M"
1!
#3800000
0!
#3850000
b1 M"
b100111 "
1!
#3900000
0!
#3950000
b101000 "
b10 M"
1!
#4000000
0!
#4050000
b11 M"
b101001 "
1!
#4100000
0!
#4150000
b101010 "
b100 M"
1!
#4200000
0!
#4250000
b0 M"
b101011 "
1!
#4300000
0!
#4350000
b101100 "
b1 M"
1!
#4400000
0!
#4450000
b10 M"
b101101 "
1!
#4500000
0!
#4550000
b101110 "
b11 M"
1!
#4600000
0!
#4650000
b100 M"
b101111 "
1!
#4700000
0!
#4750000
b110000 "
b0 M"
1!
#4800000
0!
#4850000
b1 M"
b110001 "
1!
#4900000
0!
#4950000
b110010 "
b10 M"
1!
#5000000
0!
#5050000
b11 M"
b110011 "
1!
#5100000
0!
#5150000
b110100 "
b100 M"
1!
#5200000
0!
#5250000
b0 M"
b110101 "
1!
#5300000
0!
#5350000
b110110 "
b1 M"
1!
#5400000
0!
#5450000
b10 M"
b110111 "
1!
#5500000
0!
#5550000
b111000 "
b11 M"
1!
#5600000
0!
#5650000
b100 M"
b111001 "
1!
#5700000
0!
#5750000
b111010 "
b0 M"
1!
#5800000
0!
#5850000
b1 M"
b111011 "
1!
#5900000
0!
#5950000
b111100 "
b10 M"
1!
#6000000
0!
#6050000
b11 M"
b111101 "
1!
#6100000
0!
#6150000
b111110 "
b100 M"
1!
#6200000
0!
#6250000
b0 M"
b111111 "
1!
#6300000
0!
#6350000
b1000000 "
b1 M"
1!
#6400000
0!
#6450000
b10 M"
b1000001 "
1!
#6500000
0!
#6550000
b1000010 "
b11 M"
1!
#6600000
0!
#6650000
b100 M"
b1000011 "
1!
#6700000
0!
#6750000
b1000100 "
b0 M"
1!
#6800000
0!
#6850000
b1 M"
b1000101 "
1!
#6900000
0!
#6950000
b1000110 "
b10 M"
1!
#7000000
0!
#7050000
b11 M"
b1000111 "
1!
#7100000
0!
#7150000
b1001000 "
b100 M"
1!
#7200000
0!
#7250000
b0 M"
b1001001 "
1!
#7300000
0!
#7350000
b1001010 "
b1 M"
1!
#7400000
0!
#7450000
b10 M"
b1001011 "
1!
#7500000
0!
#7550000
b1001100 "
b11 M"
1!
#7600000
0!
#7650000
b100 M"
b1001101 "
1!
#7700000
0!
#7750000
b1001110 "
b0 M"
1!
#7800000
0!
#7850000
b1 M"
b1001111 "
1!
#7900000
0!
#7950000
b1010000 "
b10 M"
1!
#8000000
0!
#8050000
b11 M"
b1010001 "
1!
#8100000
0!
#8150000
b1010010 "
b100 M"
1!
#8200000
0!
#8250000
b0 M"
b1010011 "
1!
#8300000
0!
#8350000
b1010100 "
b1 M"
1!
#8400000
0!
#8450000
b10 M"
b1010101 "
1!
#8500000
0!
#8550000
b1010110 "
b11 M"
1!
#8600000
0!
#8650000
b100 M"
b1010111 "
1!
#8700000
0!
#8750000
b1011000 "
b0 M"
1!
#8800000
0!
#8850000
b1 M"
b1011001 "
1!
#8900000
0!
#8950000
b1011010 "
b10 M"
1!
#9000000
0!
#9050000
b11 M"
b1011011 "
1!
#9100000
0!
#9150000
b1011100 "
b100 M"
1!
#9200000
0!
#9250000
b0 M"
b1011101 "
1!
#9300000
0!
#9350000
b1011110 "
b1 M"
1!
#9400000
0!
#9450000
b10 M"
b1011111 "
1!
#9500000
0!
#9550000
b1100000 "
b11 M"
1!
#9600000
0!
#9650000
b100 M"
b1100001 "
1!
#9700000
0!
#9750000
b1100010 "
b0 M"
1!
#9800000
0!
#9850000
b1 M"
b1100011 "
1!
#9900000
0!
#9950000
b1100100 "
b10 M"
1!
#10000000
0!
#10050000
b11 M"
b1100101 "
1!
